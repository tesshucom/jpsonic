//
// The following are additional definitions of Jpsonic.
// Basically, the correction was made with the display in a language
// that requires more display width than English in mind.
//

// ******************** Overall *******************************************

.bgcolor2,
.ruleTableHeader,
.log,
.bgcolor2 {
  background-color: $jp-color-base1;
}

// ******************** rightframe/right.jsp ******************************

body.bgcolor1.rightframe {
  margin: 0 4px 0 4px;
  padding: 0.5rem;
  background-color: $jp-color-white;
  .detail {
    white-space: normal;
  }
}

// ******************** dense/albumMain.jsp, left.jsp, playQueue.jsp ******

p.dense {
  overflow: hidden;
  min-width: 200px;
  height: 1.7rem;
  margin: 0;
  padding: 0.1em 0 0.1em 0;
  @include border(other-than-top);
  background: $jp-color-white;
  font-size: 0.86rem;
  &:hover {
    background-color: $jp-color-mask-light-gray;
  }
  img {
    height: 18px;
  }
}

p.dense.last {
  @include borderRadius(lower);
}

///////////////////////////////////////////////////////////////////////////

//
// The following is a rewrite of the definition specified
// as "The rest of the CSS is typically not changed in other themes"
// in default-without-mediaelement.css, or Jpsonic's own addition.
// Jpsonic has added columns for composers and genres, and added headers.
// Redundant additional definitions were needed to account for these and display widths.
//

// ******************** log/help.jsp **************************************

table.log.indent {
  table-layout: fixed;
  width: 100%;
  margin-top: 1rem;
  margin-bottom: 1rem;
  @include border;
  @include borderRadius;
  border-collapse: separate;
  border-spacing: 0;
  word-wrap: break-word;
  td {
    font-size: 0.4rem;
    white-space: normal;
    word-wrap: break-word;
  }
  tr:nth-child(even) {
    background-color: $jp-color-mask-light-gray;
  }
}

// ******************** music/Overall *************************************

// The class name music is used, probably due to the influence of the initial design.
// But in practice many tables rely on this definition.
// Currently, the following definitions have a common definition role
// that affects many tables on the entire Web screen.
// Later versions may inherit this and add optimized settings to each table.

// .bgcolor2.playlistframe table.music (playqueue)
.bgcolor2.playlistframe {
  table.music.indent {
    margin: 10px;
    background-color: $jp-color-white;
    tbody {
      tr {
        @include border(bottom-zero);
        background-color: $jp-color-white;
        td {
          padding: 0.3rem;
          @include border(bottom);
        }
        &:last-child {
          td {
            @include border(bottom-zero);
            background-color: $jp-color-white;
          }
        }
      }
    }
  }
}

// Tweaks
.mainframe.bgcolor1 {
  table {
    tbody {
      td {
        &:first-child {
          padding-right: 20px;
        }
        a:not(.fancy) {
          img {
            // refresh, random , etc./home.jsp
            // width: 18px;
            height: 18px;
            @include imageLink;
          }
        }
      }
    }
  }
  table.music {
    tbody {
      td {
        padding-right: 0.3rem;
      }
    }
  }
  table.music.playlist thead th,
  table.music tbody tr td {
    &:first-child {
      padding-left: 1rem;
    }
    &:last-child {
      padding-right: 1rem;
    }
  }
}

// ******************** ruleTable/editTags.jsp ****************************
//                                error.jsp,
//                                help.jsp,
//                                internalHelp.jsp,
//                                playerSetting.jsp,
//                                status.jsp

// Following music class, this class has a great impact.
// Currently this definition has a common definition role that affects many tables across the web screen.
// Also, unlike music class, each table has variations.
// Later versions may inherit this and add optimized settings to each table.

table.ruleTable.indent {
  @include border;
  @include borderRadius;
  border-collapse: separate;
  border-spacing: 0;
  tbody {
    tr {
      @include border(bottom-zero);
      td {
        padding: 0.3rem;
        @include border(bottom);
      }
      &:first-child {
        td {
          &:first-child {
            @include borderRadius(upper-left);
          }
          &:last-child {
            @include borderRadius(upper-right);
          }
        }
      }
      &:last-child {
        @include border(bottom-zero);
        td {
          @include border(bottom-zero);
          &:first-child {
            @include borderRadius(lower-left);
          }
          &:last-child {
            @include borderRadius(lower-right);
          }
        }
      }
    }
  }
}

// ******************** truncate/search.jsp *******************************

// The following specifications specify the special width of truncate.
// In conventional search screens, the column widths are not uniform among multiple tables,
// making it difficult to see. Jpsonic has improved this.
// Since the displayed columns differ depending on the settings,
// dedicated script processing is required for full-scale implementation.
// Jpsonic does not do such complicated processing and avoids it with simple CSS.

.truncate.mainTitle {
  min-width: 20rem;
  width: 30%;
}
//.truncate.mainAlbum{}
//.truncate.mainArtist{}
//.truncate.mainComposer{}
.truncate.mainGenre {
  min-width: 6rem;
}
.truncate.playlistTitle {
  min-width: 20rem;
  width: 30%;
}
//.truncate.playlistAlbum    {}
//.truncate.playlistArtist  {}
//.truncate.playlistComposer  {}
.truncate.playlistGenre {
  min-width: 6rem;
}
.truncate.searchAlbumAlbum {
  max-width: 45%;
  width: 45%;
}
.truncate.searchAlbumAlbumartist1 {
  max-width: 36%;
  width: 36%;
}
.truncate.searchAlbumAlbumartist2 {
  max-width: 18%;
  width: 18%;
}
.truncate.searchSongTitle {
  max-width: 25%;
  width: 25%;
}
.truncate.searchSongAlbum {
  max-width: 20%;
  width: 20%;
}
.truncate.searchSongArtist {
  max-width: 18%;
  width: 18%;
}
.truncate.searchSongComposer {
  max-width: 18%;
  width: 18%;
}

// ******************** artistInfoTable/artistMain.jsp ********************

// Biography.
table.artistInfoTable {
  width: 80%;
  margin: 0 auto;
  @include border;
  @include borderRadius;
  border-collapse: separate;
  border-spacing: 0;
}

/* Fine dl/dt/dd adjustment for each page */
dl.playerSettings {
  width: 60rem;
  padding: 0.1em;
  margin: 0.1em;
  dt {
    width: 35%;
  }
  dd {
    width: 65%;
  }
}

// ******************** domestic ******************************************

// Icon indicating addition of Jpsonic function
.domestic {
  width: 18px;
  height: 18px;
}

// ******************** image link ****************************************

// Apply effects to clickable images
// Measures are taken on the no-effected image in Airsonic

table.music td.fit img, // Album table
.mainframe.bgcolor1 div.detail img, // Album detail
.mainframe h1 img#starImage, // Star of title
.mainframe.bgcolor1>div>a:not(.fancy)>img // list/tile switch
{
  @include imageLink;
}

.leftframe table.bgcolor1 th a img {
  // index
  @include imageLink(false);
}

// ******************** others ********************************************

// Mostly trivial position adjustment

img {
  &#hide-left-frame {
    width: 25px;
  }
  &#show-left-frame {
    width: 25px;
  }
}

[id^="currentImage"] {
  height: 16px;
}

[id^="titleUrl"] {
  vertical-align: middle;
}

div.detail img {
  padding: 0 2px 0 2px;
}

// Affects the row height of 'Top songs'
.mainframe.bgcolor1 {
  table.music.indent {
    &:nth-of-type(3) {
      tr {
        td {
          img {
            width: 18px;
            height: 18px;
          }
        }
      }
    }
  }
}

// Play queue layer definition
.bgcolor2.playlistframe div.bgcolor2 {
  position: relative;
  z-index: 1;
}

// ******************** end ***********************************************
