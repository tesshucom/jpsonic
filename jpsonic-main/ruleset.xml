<?xml version="1.0"?>
<ruleset name="Jpsonic Custom Rules Priority3"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        This file is whitelist definition of rules for a PMD(7.x).

        [Priority level value controllable by Maven / Logical name in Eclipse plug-in]
        priority 1 / blocker   : Almost follow default rules
        priority 2 / critical  : Almost follow default rules
        priority 3 / urgent    : Exclude unnecessary rules
        priority 4 / important : Exclude unnecessary rules
        priority 5 / warning   : Exclude unnecessary rules
    </description>

    <!-- Because it is impossible to analyze with the current PMD, and TokenMgrError occurs. -->
    <exclude-pattern>.*/.*Id3ArtistTokenizerTest.java</exclude-pattern>
    <exclude-pattern>.*/.*UPnPSearchCriteriaDirectorLegacyTest.java</exclude-pattern>
    <exclude-pattern>.*/.*UPnPSearchCriteriaDirectorTest.java</exclude-pattern>
    <exclude-pattern>.*/.*JapaneseReadingUtilsTest.java</exclude-pattern>
    <exclude-pattern>.*/.*dlnaSettings.jsp</exclude-pattern>

    <!-- Because it's a snippet for backwards compatibility and the code will not change in the future. -->
    <exclude-pattern>.*/.*RandomStringTag.java</exclude-pattern>
    <exclude-pattern>.*/.*StringTagSupport.java</exclude-pattern>
    <exclude-pattern>.*/.*TruncateNicelyTag.java</exclude-pattern>
    <exclude-pattern>.*/.*StringW.java</exclude-pattern>
    <exclude-pattern>.*/.*XmlW.java</exclude-pattern>

    <!-- Java Rules:Best Practices -->
    <rule ref="category/java/bestpractices.xml">

        <!-- Because it is a single project and caller is guaranteed. -->
        <exclude name="MethodReturnsInternalArray" />

        <!-- Messages on complex test are recommended, but not required for all processes. -->
        <exclude name="UnitTestAssertionsShouldIncludeMessage" />

        <!-- It is also possible to organize, after improving coverage. -->
        <exclude name="UnitTestContainsTooManyAsserts" />

        <!-- Degrade pmd/pmd#1218 -->
        <exclude name="LooseCoupling" />

        <!-- Not required for Java 17 and later -->
        <exclude name="NonExhaustiveSwitch" />

        <!-- Cannot be suppressed with a comment
            because it conflicts with UnnecessaryWarningSuppression.
            This rule is unnecessary because the IDE can detect it more accurately. -->
        <exclude name="UnusedPrivateMethod" />

        <!-- This rule itself is experimental but generally useful.
            However, it may conflict with other rules whose behavior varies
            between PMD versions (such as CloseResource).
            When this rule is enabled, 
            it prevents proactive suppression of those version-dependent rules.
            A better practice is to use it as an occasional active rule.
            Normally, keep this experimental rule disabled globally,
            and enable it periodically
            to check for unnecessary assignments or obsolete code.
        -->
        <exclude name="UnnecessaryWarningSuppression" />

    </rule>

    <!-- Java Rules:Code Style -->
    <rule ref="category/java/codestyle.xml">

        <!-- Because if you are too particular about it, it may be difficult to read. -->
        <exclude name="ShortMethodName" />
        <exclude name="ShortVariable" />
        <exclude name="LongVariable" />

        <!-- Because it's redundant. It also obscures Checkstyle:VariableDeclarationUsageDistance. -->
        <exclude name="MethodArgumentCouldBeFinal" />
        <exclude name="LocalVariableCouldBeFinal" />

        <!-- Because it omits an empty constructor with no arguments. -->
        <exclude name="AtLeastOneConstructor" />

        <!-- Because it should not be managed by comments. -->
        <exclude name="CommentDefaultAccessModifier" />

        <!-- Rather recommended. -->
        <exclude name="OnlyOneReturn" />

        <!-- Degrade pmd/pmd#4785 -->
        <exclude name="UnnecessaryImport" />

        <!-- allowCommentedBlocks will be ignored. (And duplicate with Checkstyle) -->
        <exclude name="EmptyControlStatement" />
    </rule>

    <!-- Java Rules:Design -->
    <rule ref="category/java/design.xml">

        <!-- Processing may be aggregated for performance reasons, and simple subdivision 
            is not always a best practice. It may be changed from other specific design 
            perspectives or by reviewing the rules. It does not judge errors based on 
            simple thresholds. -->
        <exclude name="GodClass" />
        <exclude name="CouplingBetweenObjects" />
        <exclude name="TooManyFields" />
        <exclude name="TooManyMethods" />
        <exclude name="ExcessiveImports" />
        <exclude name="ExcessiveParameterList" />
        <exclude name="ExcessivePublicCount" />
        <exclude name="NcssCount" />

        <!-- The rule flags any usage of objects not created locally received as 
            parameters. This rule is ignored, as even standard notation is affected in 
            this day and age. -->
        <exclude name="LawOfDemeter" />

        <!-- This rule mainly refers to the amount of branching. Ignore the pointed 
            out point because it is mostly implemented according to the requirements. 
            More important is NPathComplexity. It will be renamed in 7.0. -->
        <exclude name="CyclomaticComplexity" />

        <!-- This rule is intended to avoid the Anemic Domain Model anti-pattern 
            in favor of using Domain-Driven Design. Not valid for this project. -->
        <exclude name="DataClass" />

        <!-- References to traditionally existing ghost rules. Suppress log warnings.
            This rule cannot be used even if the suppression is removed. -->
        <exclude name="LoosePackageCoupling" />

        <!-- Spring beans are not applicable. -->
        <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal" />
    </rule>

    <!-- Java Rules:Documentation -->
    <rule ref="category/java/documentation.xml">

        <!-- Comments on complex processes are recommended, but not required for all processes. -->
        <exclude name="UncommentedEmptyConstructor" />
        <exclude name="CommentRequired" />
        <exclude name="CommentSize" />
    </rule>

    <!-- Java Rules:Error Prone -->
    <rule ref="category/java/errorprone.xml">

        <!-- Because not needed for this project. -->
        <exclude name="MissingSerialVersionUID" />

        <!-- Degrade pmd/pmd#4514 -->
        <exclude name="AvoidLiteralsInIfCondition" />
        <!-- 0L was added.
        <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
            <properties>
                <property name="ignoreMagicNumbers" value="-1,0,0L" />
            </properties>
        </rule>
         -->

        <!-- It's too early(bug rule). Type determination is inaccurate. Cases in 
            which accurate boxing is expected are also detected excessively. Or may not 
            work on Windows. Or workarounds always conflict with Unnecessary**Cast rules. -->
        <exclude name="ConfusingArgumentToVarargsMethod" />
    </rule>

    <!-- Because annotations and Dao (literals for building SQL) are skipped. -->
    <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
        <properties>
            <property name="skipAnnotations" value="true" />
        </properties>
    </rule>

    <!-- Java Rules:Multithreading -->
    <rule ref="category/java/multithreading.xml">
        <!-- In legacy servers, thread generation was done freely in various places. 
            That's the worst. Currently, it has been improved so that it can be used 
            via pooling, and Executor etc. are used as accessors. In the future these 
            could be replaced by virtual threads. Regarding this matter, it is necessary 
            to consider the newer J2EE/JEE specifications than PMD. -->
        <exclude name="DoNotUseThreads" />
    </rule>

    <!-- Java Rules:Performance -->
    <rule ref="category/java/performance.xml">

        <!-- This is an old rule. Switch-arrows targeting enums
             should be used proactively even if they have few branches. -->
        <exclude name="TooFewBranchesForSwitch" />

    </rule>

    <!-- Java Rules:Security -->
    <rule ref="category/java/security.xml" />

    <!-- JSP Rules:Best Practices -->
    <rule ref="category/jsp/bestpractices.xml">

        <!-- Style is destroyed when applied. -->
        <exclude name="NoClassAttribute" />
    </rule>

    <!-- JSP Rules:Code Style -->
    <rule ref="category/jsp/codestyle.xml" />

    <!-- JSP Rules:Design -->
    <rule ref="category/jsp/design.xml">

        <!-- Many include JSTL, and excessive partitioning reduces productivity and communication efficiency. -->
        <exclude name="NoLongScripts" />

        <!-- Most of them have low reusability. -->
        <exclude name="NoInlineScript" />
    </rule>

    <!-- JSP Rules:Error Prone -->
    <rule ref="category/jsp/errorprone.xml" />

    <!-- JSP Rules:Security -->
    <rule ref="category/jsp/security.xml">

        <!-- *** Escape is applied to required items. #614 *** -->
        <exclude name="NoUnsanitizedJSPExpression" />
    </rule>

    <!-- POM:Error Prone -->
    <rule ref="category/pom/errorprone.xml" />

</ruleset>
